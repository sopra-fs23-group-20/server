name: Deploy Project to App Engine

on:
  push:
    branches:
      - main

  # run the workflow manually from the Actions tab
  workflow_dispatch:

jobs:
#  test:
#  name: Test and Sonarqube
#  runs-on: ubuntu-latest
#
#  steps:
#    - name: Checkout repository code
#      uses: actions/checkout@v2
#
#    - name: Install Java 17
#      uses: actions/setup-java@v3
#      with:
#        distribution: "temurin"
#        java-version: "17"
#
#    - name: Set database password1
#      run: echo "dbPassword=${{ secrets.DB_OLYMPIUS }}" > dbpassword.properties
#
#    - name: Test and analyze
#      run: ./gradlew test jacocoTestReport sonar -Dsonar.branch.name=main
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        SPRING_PROFILES_ACTIVE: dev
#        GRADLE_OPTS: '-DdbPassword=${{ secrets.DB_OLYMPIUS }}'



  deploy:
    name: Deploying to Google Cloud
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set database password
        run: echo "dbPassword=${{ secrets.DB_OLYMPIUS }}" >> src/main/resources/application.properties


      - name: Deploy to App Engine
        id: deploy
        uses: google-github-actions/deploy-appengine@v0.2.0
        with:
          deliverables: app.yaml
          version: v1
          credentials: ${{ secrets.GCP_SERVICE_CREDENTIALS }}
        env:
          SPRING_PROFILES_ACTIVE: dev

      - name: Test
        run: curl "${{ steps.deploy.outputs.url }}"



  deployRaspberryPi:
    name: Deploying to Raspberry Pi
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Raspberry Pi
        env:
          RASPBERRY_PI_HOST: ${{ secrets.RASPBERRY_PI_HOST }}
          RASPBERRY_PI_USERNAME: ${{ secrets.RASPBERRY_PI_USERNAME }}
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          RASPBERRY_PI_PORT: ${{ secrets.RASPBERRY_PI_PORT }}
        run: |
          sshpass -p $RASPBERRY_PI_PASSWORD ssh -p $RASPBERRY_PI_PORT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $RASPBERRY_PI_USERNAME@$RASPBERRY_PI_HOST "sudo /home/pi/serverBuildRun.sh"
        continue-on-error: true